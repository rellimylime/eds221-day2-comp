---
title: "r-py-data-types"
format: html
editor: visual
---

## Data Types

### Vectors

```{r}
# A character vector
dogs <- c("teddy", "khora", "waffle", "banjo")

typeof(dogs)
class(dogs)
```

```{r}
# A numerical vector
weights <- c(50, 55, 25, 35)

typeof(weights)
class(weights)
```

```{r}
# An integer vector
dog_age <- c(5L, 6L, 1L, 7L)

typeof(dog_age)
class(dog_age)

# Check with logical
is.numeric(dog_age)
```

```{r}
# Combined vectors
dog_info <- c("teddy", 50, 5L)
dog_info

typeof(dog_info)
class(dog_info)
is.character(dog_info)
```

```{r}
# Named elements
dog_food <- c(teddy = "purina", khora = "alpo", waffle = "fancy_feast", banjo = "blue diamond")
dog_food

class(dog_food)
typeof(dog_food)

# Accessing bits of vectors
dog_food[2]

dog_food["khora"]
```

```{r}
# Create vector of car colors
cars <- c("red", "orange", "white", "blue", "green", "silver", "black")

# Access just the fifth element
cars[5]

# Access 2 through 4
cars[2:4]
```

### A warm-up for loops

```{r}
i <- 4
cars[i]

i <- seq(1:3)
cars[i]

# Vectors are mutable!
cars[3] <- "BURRITOS!"
cars
```

## Matrices!

```{r}
fish_size <- matrix(c(0.8, 1.2, 0.4, 0.9), ncol = 2, nrow = 2, byrow = FALSE)

fish_size

typeof(fish_size)
class(fish_size)
```

```{r}
# Matrix of multiple data types?
dog_walk <- matrix(c("teddy", 5, "khora", 10), ncol = 2, nrow = 2, byrow = FALSE)

dog_walk

class(dog_walk)
typeof(dog_walk)
```

### Accessing pieces of matrices

```{r}
whale_travel <- matrix(data = c(31.8, 1348, 46.9, 1587), nrow = 2, ncol = 2, byrow = TRUE)

whale_travel

# Access the value 1348
whale_travel[1,2]

# Access the value 46.9
whale_travel[2,1]

# Access entire row/column by not giving a column/row value
whale_travel[2,]
whale_travel[,1]

# Giving one element returns value as if populated by column
whale_travel[1]
whale_travel[2]
whale_travel[3]

```

## Lists

```{r}
urchins <- list("blue", c(1, 2, 3), c("a cat", "a dog"), 5L)
urchins


```

### Accessing pieces of a list

```{r}
urchins[[2]]
# Compared to
urchins[2]

# A single [] returns a list. [[]] returns the item STORED in the list
```

### Naming list items

```{r}
tacos <- list(topping = c("onion", "cilantro", "guacamole"), filling = c("beans", "meat", "veggie"), price = c(6.75, 8.25, 9.50))

# The whole thing
tacos

# Just get one piece of it
tacos[[2]]

# ...or, the same thing:
tacos$filling
```

## Data frames

a list containing vectors of the same length, where each column is a variable stored in a vector

```{r}
fruit <- data.frame(type = c("apple", "banana", "peach"), mass = c(130, 195, 150))

fruit

class(fruit)
```

### Access elements from a data frame

use \[row#, col#\], or name the column then the element number

```{r}
fruit[1.2]
fruit[3,1]
fruit[2,1] <- "pineapple"
fruit

```

## Making and Indexing data in Python

### Vectors and matrices in Python

```{r}
library(reticulate)
py_install("numpy")
py_install("pandas")
```

```{python}
import numpy as np
import pandas as pd

teddy = [1, 2, 8]
teddy_vec = np.array(teddy)

teddy_vec

type(teddy_vec)
```

A list is mutable - can be changed directly

```{python}
teddy[1] =  1000

teddy
```

A tuple is immutable, you will get yelled at if you try to change it

```{python}
khora = (1, 5, 12)

type(khora)

khora[1] = 16 # Nope
```

A more involved list (note: you can also use list() to create lists in python)

```{python}
waffle = [["cat", "dog", "penguin"], 2, "a burrito", [1,2,5]]

waffle

# Access an element from the list waffle:
waffle[0] # Default just returns that piece (not as a list)
type(waffle[0])
```

We can reassign pieces of a list:

```{python}
waffle[1] = "AN EXTRAVAGANZA"
waffle
```

## Make Pandas DataFrame in Python

### First a dictionary example:

```{python}
fox = {'sound': ["screech", "squeal", "bark"], 'age': [2, 6, 10]}

fox['sound']
fox['age']

cows = {'name': ["moo", "spots", "happy"], 'location': ["pasture", "prairie", "barn"], 'height': [5.7, 5.4, 4.9]}

cows_df = pd.DataFrame(cows)

cows_df

# Get a column
cows_df['name']

# Get an element using df.at[]
cows_df.at[1, 'name']
```

### Side by side: R data frame & Pandas DataFrame

#### In R:

```{r}
home_sales <- data.frame(
  state = c("CA", "NV", "OR"),
  sales = c(38000, 4670, 2750)
)

home_sales
```

#### In python

```{python}
home_sales = {'state': ["CA", "NV", "OR"], 'sales': [38000, 4670, 2750]}

home_sales = pd.DataFrame(home_sales)

home_sales
```

## Atomic vectors

```{r}
x <- c(2.1, 4.2, 3.3, 5.4)
```
Positive integers
```{r}
x[c(3, 1)]
x[order(x)]

# Duplicate indices will duplicate values
x[c(1, 1)]

# Real numbers are silently truncated to integers
x[c(2.1, 2.9)]
```
Negative integers
```{r}
# Exclude all values at specified locations
x[-c(3, 1)]

# Can't mix positive and negative
x[c(-1,2)]
```
Logical vectors
```{r}
x[c(TRUE, TRUE, FALSE, FALSE)]

x[x > 3]

x[c(TRUE, FALSE)]
# Equivalent to
x[c(TRUE, FALSE, TRUE, FALSE)]

x[c(TRUE, TRUE, NA, FALSE)]

x[]
```
## Subsetting and assignment
```{r}
x <- 1:5
x[c(1, 2)] <- 2:3
x

x[-1] <- 4:1
x

x[c(1, NA)] <- c(1, 2)

x[c(T, F, NA)] <- 1
x

df <- data.frame(a = c(1, 10, NA))
df$a[df$a < 5] <- 0
df$a
```
## Subsetting rows based on conditions
```{r}
mtcars[mtcars$gear == 5, ]

mtcars[mtcars$gear == 5 & mtcars$cyl ==4, ]
```
